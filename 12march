Q1. Calculate the 95% confidence interval for a sample of data with a mean of 50 and a standard deviation of 5 using Python. Interpret the results.
import scipy.stats as stats

# Given data
sample_mean = 50
sample_std_dev = 5
sample_size = 10 # Replace this with the actual sample size

# Calculate the standard error (standard deviation of the sample mean)
standard_error = sample_std_dev / (sample_size ** 0.5)

# Define the confidence level (1 - alpha), where alpha = 0.05 for a 95% confidence level
confidence_level = 0.95

# Calculate the critical value (z-score) for the given confidence level
# For a two-tailed test (default), use the 0.025 quantile for the lower and upper tails
z_critical = stats.norm.ppf(1 - (1 - confidence_level) / 2)

# Calculate the margin of error
margin_of_error = z_critical * standard_error

# Calculate the confidence interval
lower_bound = sample_mean - margin_of_error
upper_bound = sample_mean + margin_of_error

print(f"95% Confidence Interval: ({lower_bound:.2f}, {upper_bound:.2f})")
95% Confidence Interval: (46.90, 53.10)
Q2. Conduct a chi-square goodness of fit test to determine if the distribution of colors of M&Ms in a bag matches the expected distribution of 20% blue, 20% orange, 20% green, 10% yellow, 10% red, and 20% brown. Use Python to perform the test with a significance level of 0.05.
import numpy as np
import scipy.stats as stats

# Given observed frequencies of colors in the bag
observed_frequencies = np.array([40, 35, 45, 20, 15, 35])

# Expected frequencies based on the expected distribution
expected_frequencies = np.array([0.20, 0.20, 0.20, 0.10, 0.10, 0.20]) * sum(observed_frequencies)

# Perform the chi-square test
chi2_stat, p_value = stats.chisquare(observed_frequencies, expected_frequencies)

# Set the significance level (alpha)
alpha = 0.05

# Compare the p-value with the significance level
if p_value < alpha:
    print("The distribution of colors in the bag does not match the expected distribution.")
else:
    print("The distribution of colors in the bag matches the expected distribution.")
The distribution of colors in the bag matches the expected distribution.
Q3. Use Python to calculate the chi-square statistic and p-value for a contingency table with the following data:
group a group b

Outcome1 20 15

Outcome2 10 25

Outcome3 15 20

Interpret the results of the test.

import numpy as np
import scipy.stats as stats

# Given data for the contingency table
observed_data = np.array([[20, 15],
                          [10, 25],
                          [15, 20]])

# Perform the chi-square test for independence
chi2_stat, p_value, dof, expected = stats.chi2_contingency(observed_data)

print("Chi-square Statistic:", chi2_stat)
print("P-value:", p_value)
Chi-square Statistic: 5.833333333333334
P-value: 0.05411376622282158
Q4. A study of the prevalence of smoking in a population of 500 individuals found that 60 individuals smoked. Use Python to calculate the 95% confidence interval for the true proportion of individuals in the population who smoke.
import statsmodels.stats.proportion as prop

# Given data
total_population = 500
smokers = 60

# Calculate the proportion of smokers in the sample
sample_proportion = smokers / total_population

# Calculate the confidence interval using the Wilson score interval
confidence_interval = prop.proportion_confint(smokers, total_population, alpha=0.05, method='wilson')

lower_bound, upper_bound = confidence_interval

print(f"95% Confidence Interval: ({lower_bound:.4f}, {upper_bound:.4f})")
95% Confidence Interval: (0.0944, 0.1514)
Q5. Calculate the 90% confidence interval for a sample of data with a mean of 75 and a standard deviation of 12 using Python. Interpret the results.
import scipy.stats as stats

# Given data
sample_mean = 75
sample_std_dev = 12
sample_size = 10 # Replace this with the actual sample size

# Calculate the standard error (standard deviation of the sample mean)
standard_error = sample_std_dev / (sample_size ** 0.5)

# Define the confidence level (1 - alpha), where alpha = 0.10 for a 90% confidence level
confidence_level = 0.90

# Calculate the critical value (z-score) for the given confidence level
# For a two-tailed test (default), use the 0.05 quantile for the lower and upper tails
z_critical = stats.norm.ppf(1 - (1 - confidence_level) / 2)

# Calculate the margin of error
margin_of_error = z_critical * standard_error

# Calculate the confidence interval
lower_bound = sample_mean - margin_of_error
upper_bound = sample_mean + margin_of_error

print(f"90% Confidence Interval: ({lower_bound:.2f}, {upper_bound:.2f})")
90% Confidence Interval: (68.76, 81.24)
Q6. Use Python to plot the chi-square distribution with 10 degrees of freedom. Label the axes and shade the area corresponding to a chi-square statistic of 15.
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats

# Define the degrees of freedom for the chi-square distribution
degrees_of_freedom = 10

# Create an array of x values for the plot
x = np.linspace(0, 30, 500)

# Calculate the probability density function (PDF) for the chi-square distribution
pdf = stats.chi2.pdf(x, df=degrees_of_freedom)

# Plot the chi-square distribution
plt.plot(x, pdf, label=f"Chi-square Distribution (DF = {degrees_of_freedom})")

# Shade the area corresponding to a chi-square statistic of 15
x_shaded = np.linspace(15, 30, 500)
pdf_shaded = stats.chi2.pdf(x_shaded, df=degrees_of_freedom)
plt.fill_between(x_shaded, pdf_shaded, color='gray', alpha=0.5, label="Area for Chi-square = 15")

# Label the axes and add a legend
plt.xlabel("Chi-square Statistic")
plt.ylabel("Probability Density Function (PDF)")
plt.legend()

# Show the plot
plt.show()

Q7. A random sample of 1000 people was asked if they preferred Coke or Pepsi. Of the sample, 520 preferred Coke. Calculate a 99% confidence interval for the true proportion of people in the population who prefer Coke.
import statsmodels.stats.proportion as prop

# Given data
total_sample_size = 1000
coke_preferred = 520

# Calculate the proportion of people who prefer Coke in the sample
sample_proportion = coke_preferred / total_sample_size

# Calculate the confidence interval using the Wilson score interval
confidence_interval = prop.proportion_confint(coke_preferred, total_sample_size, alpha=0.01, method='wilson')

lower_bound, upper_bound = confidence_interval

print(f"99% Confidence Interval: ({lower_bound:.4f}, {upper_bound:.4f})")
99% Confidence Interval: (0.4793, 0.5604)
Q8. A researcher hypothesizes that a coin is biased towards tails. They flip the coin 100 times and observe 45 tails. Conduct a chi-square goodness of fit test to determine if the observed frequencies match the expected frequencies of a fair coin. Use a significance level of 0.05.
import numpy as np
import scipy.stats as stats

# Given observed frequencies
observed_tails = 45
total_flips = 100

# Calculate the number of heads observed
observed_heads = total_flips - observed_tails

# Calculate the expected frequencies under the assumption of a fair coin
expected_tails = total_flips / 2
expected_heads = total_flips / 2

# Create the observed and expected frequency arrays
observed_frequencies = np.array([observed_heads, observed_tails])
expected_frequencies = np.array([expected_heads, expected_tails])

# Perform the chi-square goodness of fit test
chi2_stat, p_value = stats.chisquare(observed_frequencies, expected_frequencies)

# Set the significance level (alpha)
alpha = 0.05

# Compare the p-value with the significance level
if p_value < alpha:
    print("The coin is biased towards tails (reject the null hypothesis).")
else:
    print("There is no evidence of bias towards tails (fail to reject the null hypothesis).")
There is no evidence of bias towards tails (fail to reject the null hypothesis).
Q9. A study was conducted to determine if there is an association between smoking status (smoker or non-smoker) and lung cancer diagnosis (yes or no). The results are shown in the contingency table below. Conduct a chi-square test for independence to determine if there is a significant association between smoking status and lung cancer diagnosis.
Use a significance level of 0.05.

Lung Cancer: Yes

Smoker 60 140

Non-smoker 30 170

import numpy as np
import scipy.stats as stats

# Given data for the contingency table
observed_data = np.array([[60, 140],
                          [30, 170]])

# Perform the chi-square test for independence
chi2_stat, p_value, dof, expected = stats.chi2_contingency(observed_data)

# Set the significance level (alpha)
alpha = 0.05

# Compare the p-value with the significance level
if p_value < alpha:
    print("There is a significant association between smoking status and lung cancer diagnosis (reject the null hypothesis).")
else:
    print("There is no significant association between smoking status and lung cancer diagnosis (fail to reject the null hypothesis).")
There is a significant association between smoking status and lung cancer diagnosis (reject the null hypothesis).
Q10. A study was conducted to determine if the proportion of people who prefer milk chocolate, dark chocolate, or white chocolate is different in the U.S. versus the U.K. A random sample of 500 people from the U.S. and a random sample of 500 people from the U.K. were surveyed. The results are shown in the contingency table below. Conduct a chi-square test for independence to determine if there is a significant association between chocolate preference and country of origin.
Use a significance level of 0.01.

Milk Chocolate

U.S. (n=500) 200 150 150 U.K. (n=500) 225 175 100

import numpy as np
import scipy.stats as stats

# Given data for the contingency table
observed_data = np.array([[200, 150, 150],
                          [225, 175, 100]])

# Perform the chi-square test for independence
chi2_stat, p_value, dof, expected = stats.chi2_contingency(observed_data)

# Set the significance level (alpha)
alpha = 0.01

# Compare the p-value with the significance level
if p_value < alpha:
    print("There is a significant association between chocolate preference and country of origin (reject the null hypothesis).")
else:
    print("There is no significant association between chocolate preference and country of origin (fail to reject the null hypothesis).")
There is a significant association between chocolate preference and country of origin (reject the null hypothesis).
Q11. A random sample of 30 people was selected from a population with an unknown mean and standard deviation. The sample mean was found to be 72 and the sample standard deviation was found to be 10. Conduct a hypothesis test to determine if the population mean is significantly different from 70. Use a significance level of 0.05.
import scipy.stats as stats

# Given data
sample_mean = 72
sample_std_dev = 10
sample_size = 30
population_mean = 70

# Calculate the standard error (standard deviation of the sample mean)
standard_error = sample_std_dev / (sample_size ** 0.5)

# Perform the one-sample t-test
t_stat, p_value = stats.ttest_1samp([sample_mean], population_mean)

# Set the significance level (alpha)
alpha = 0.05

# Compare the p-value with the significance level
if p_value < alpha:
    print("The population mean is significantly different from 70 (reject the null hypothesis).")
else:
    print("There is no significant difference in the population mean from 70 (fail to reject the null hypothesis).")
There is no significant difference in the population mean from 70 (fail to reject the null hypothesis).
/tmp/ipykernel_98/446782952.py:13: RuntimeWarning: Precision loss occurred in moment calculation due to catastrophic cancellation. This occurs when the data are nearly identical. Results may be unreliable.
  t_stat, p_value = stats.ttest_1samp([sample_mean], population_mean)
/opt/conda/lib/python3.10/site-packages/scipy/stats/_stats_py.py:1253: RuntimeWarning: divide by zero encountered in divide
  var *= np.divide(n, n-ddof)  # to avoid error on division by zero
/opt/conda/lib/python3.10/site-packages/scipy/stats/_stats_py.py:1253: RuntimeWarning: invalid value encountered in double_scalars
  var *= np.divide(n, n-ddof)  # to avoid error on division by zero
